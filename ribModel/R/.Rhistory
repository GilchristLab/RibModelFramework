plotPTraces(results$chains$p.Mat)
source('~/CodonUsageBias/localNSE/NSEexchange/R/load.genome.R', echo=TRUE)
d <- 10000*runif(1000)
P <- (1+(1000/d))^-8
plot(d,P, type="l", xlab="Distance(km)", ylab="P(Alien)")
d <- sort(10000*runif(1000))
P <- (1+(1000/d))^-8
plot(d,P, type="l", xlab="Distance(km)", ylab="P(Alien)")
d <- sort(100000*runif(1000))
P <- (1+(1000/d))^-8
plot(d,P, type="l", xlab="Distance(km)", ylab="P(Alien)")
plot(d,P, type="l", xlab="Distance(km)", ylab="P(Alien)", main="Probability that a species is considered Alien")
d <- sort(50000*runif(1000))
P <- (1+(1000/d))^-8
plot(d,P, type="l", xlab="Distance(km)", ylab="P(Alien)", main="Probability that a species is considered Alien")
plot(d,P, type="l", xlab="Distance(km)", ylab="P(Alien)", main="Probability that a species is considered Alien", lwd=2)
plot(d,P, type="l", xlab="Distance(km)", ylab="P(Alien)", main="Probability that a species is considered Alien", lwd=3)
B <- sort(50000*runif(1000))
P <- (1-exp(-0.002*B))*exp(-0.02*10)
plot(B,P, type="l", xlab="Ballast(l)", ylab="P(Intro)", main="Probability that an Alien is introduced", lwd=3)
B <- sort(50000*runif(1000))
P <- (1-exp(-0.002*B))*exp(-0.02*30)
plot(B,P, type="l", xlab="Ballast(l)", ylab="P(Intro)", main="Probability that an Alien is introduced", lwd=3)
B <- sort(5000*runif(1000))
P <- (1-exp(-0.002*B))*exp(-0.02*30)
plot(B,P, type="l", xlab="Ballast(l)", ylab="P(Intro)", main="Probability that an Alien is introduced", lwd=3)
B <- sort(5000*runif(1000))
P <- (1-exp(-0.002*B))*exp(-0.02*1)
plot(B,P, type="l", xlab="Ballast(l)", ylab="P(Intro)", main="Probability that an Alien is introduced", lwd=3)
B <- sort(5000*runif(1000))
P <- (1-exp(-0.002*B))*exp(-0.02*15)
plot(B,P, type="l", xlab="Ballast(l)", ylab="P(Intro)", main="Probability that an Alien is introduced", lwd=3)
B <- sort(5000*runif(1000))
P <- (1-exp(-0.002*B))*exp(-0.02*14)
plot(B,P, type="l", xlab="Ballast(l)", ylab="P(Intro)", main="Probability that an Alien is introduced", lwd=3)
B <- sort(5000*runif(1000))
P <- (1-exp(-0.002*B))*exp(-0.02*10)
plot(B,P, type="l", xlab="Ballast(l)", ylab="P(Intro)", main="Probability that an Alien is introduced", lwd=3)
B <- sort(3000*runif(1000))
P <- (1-exp(-0.002*B))*exp(-0.02*10)
plot(B,P, type="l", xlab="Ballast(l)", ylab="P(Intro)", main="Probability that an Alien is introduced", lwd=3)
plot(B*1000,P, type="l", xlab="Ballast(l)", ylab="P(Intro)", main="Probability that an Alien is introduced", lwd=3)
plot(B,P, type="l", xlab="Ballast(m^3)", ylab="P(Intro)", main="Probability that an Alien is introduced", lwd=3)
plot(B,P, type="l", xlab=expression("Ballast(m"^3")"), ylab="P(Intro)", main="Probability that an Alien is introduced", lwd=3)
plot(B,P, type="l", xlab=expression("Ballast(m"3")"), ylab="P(Intro)", main="Probability that an Alien is introduced", lwd=3)
expression("Ballast(m"3")")
expression("Ballast(m"[3]")")
expression("Ballast(m"~3~")")
plot(B,P, type="l", xlab=expression("Ballast(m"~3~")"), ylab="P(Intro)", main="Probability that an Alien is introduced", lwd=3)
plot(B,P, type="l", xlab=expression("Ballast("~m^{3}~")"), ylab="P(Intro)", main="Probability that an Alien is introduced", lwd=3)
sd(Tij)
Tij <- sort(10*runif(1000))
sd(Tij)
Sij <- sort(40*runif(1000))
sd(Sij)
Tij <- sort(40*runif(1000))
Sij <- sort(10*runif(1000))
P <- 0.00015*exp( -0.5*( (Tij/10)^2 + (Sij/3) ) )
contour(x = Tij, y = Sij, z = P)
P <- matrix(0, nrow = 1000, ncol = 1000)
for(i in 1:1000)
{
for(j in 1:1000)
{
P[i,j] <- 0.00015*exp( -0.5*( (Tij[i]/10)^2 + (Sij[j]/3) ) )
}
}
contour(x = Tij, y = Sij, z = P)
filled.contour(x = Tij, y = Sij, z = P)
Tij <- sort(10*runif(1000))
Sij <- sort(10*runif(1000))
P <- matrix(0, nrow = 1000, ncol = 1000)
for(i in 1:1000)
{
for(j in 1:1000)
{
P[i,j] <- 0.00015*exp( -0.5*( (Tij[i]/2)^2 + (Sij[j]/10) ) )
}
}
filled.contour(x = Tij, y = Sij, z = P)
Tij <- sort(10*runif(1000))
Sij <- sort(100*runif(1000))
P <- matrix(0, nrow = 1000, ncol = 1000)
for(i in 1:1000)
{
for(j in 1:1000)
{
P[i,j] <- 0.00015*exp( -0.5*( (Tij[i]/2)^2 + (Sij[j]/10) ) )
}
}
filled.contour(x = Tij, y = Sij, z = P)
filled.contour(x = Tij, y = Sij, z = P, xlab=expression(DeltaT[ij]))
filled.contour(x = Tij, y = Sij, z = P, xlab=expression(Delta~T[ij]))
Tij <- sort(10*runif(1000))
Sij <- sort(10*runif(1000))
P <- matrix(0, nrow = 1000, ncol = 1000)
for(i in 1:1000)
{
for(j in 1:1000)
{
P[i,j] <- 0.00015*exp( -0.5*( (Tij[i]/2)^2 + (Sij[j]/10) ) )
}
}
filled.contour(x = Tij, y = Sij, z = P, xlab=expression(Delta~T[ij]), ylab=expression(Delta~S[ij]))
Tij <- sort(10*runif(1000))
Sij <- sort(10*runif(1000))
P <- matrix(0, nrow = 1000, ncol = 1000)
for(i in 1:1000)
{
for(j in 1:1000)
{
P[i,j] <- 0.00015*exp( -0.5*( (Tij[i]/2)^2 + (Sij[j]/10)^2 ) )
}
}
filled.contour(x = Tij, y = Sij, z = P, xlab=expression(Delta~T[ij]), ylab=expression(Delta~S[ij]))
Tij <- sort(3*runif(1000))
Sij <- sort(10*runif(1000))
P <- matrix(0, nrow = 1000, ncol = 1000)
for(i in 1:1000)
{
for(j in 1:1000)
{
P[i,j] <- 0.00015*exp( -0.5*( (Tij[i]/2)^2 + (Sij[j]/10)^2 ) )
}
}
filled.contour(x = Tij, y = Sij, z = P, xlab=expression(Delta~T[ij]), ylab=expression(Delta~S[ij]))
filled.contour(x = Tij, y = Sij, z = P, xlab=expression(Delta~T[ij]), ylab=expression(Delta~S[ij]), color.palette = heat.colors)
filled.contour(x = Tij, y = Sij, z = P, xlab=expression(Delta~T[ij]), ylab=expression(Delta~S[ij]), color.palette = rev(heat.colors))
filled.contour(x = Tij, y = Sij, z = P, xlab=expression(Delta~T[ij]), ylab=expression(Delta~S[ij]), color.palette = rev(heat.colors(10)))
filled.contour(x = Tij, y = Sij, z = P, xlab=expression(Delta~T[ij]), ylab=expression(Delta~S[ij]), color.palette = heat.colors)
filled.contour(x = Tij, y = Sij, z = P, xlab=expression(Delta~T[ij]), ylab=expression(Delta~S[ij]), color.palette = rainbow)
?rainbow
filled.contour(x = Tij, y = Sij, z = P, xlab=expression(Delta~T[ij]), ylab=expression(Delta~S[ij]), color.palette = topo.colors)
filled.contour(x = Tij, y = Sij, z = P, xlab=expression(Delta~T[ij]), ylab=expression(Delta~S[ij]), color.palette = terrain.colors)
filled.contour(x = Tij, y = Sij, z = P, xlab=expression(Delta~T[ij]), ylab=expression(Delta~S[ij]), color.palette = terrain.colors,
main="Probability of establishment of an Alien")
source('~/Dropbox/Invasion Risks Via Shipping Networks/R/ODE_RandomNetworks.R', echo=TRUE)
source('~/Dropbox/Invasion Risks Via Shipping Networks/R/ODE_RandomNetworks.R', echo=TRUE)
install.packages("deSolve")
install.packages("deSolve")
dnorm(-10000)
dnorm(-10000, log=T)
-rexp(1)
cubfits:::my.drawSPhiPrior
log(1:10)
exp(0.3)
exp(0:3)
exp(0:2.5)
exp(2.3)
exp(2.5)
exp(0:(2.5))
0:(2.5)
log(0.5)
phi.DrawScale <- .CF.CONF$phi.DrawScale
curr <- -100
prop <- -200
phi.curr <- 1
phi.prop <- 1.5
(prop - curr) - (phi.curr - phi.prop)
exp((prop - curr) - (phi.curr - phi.prop))
(prop - curr) - (phi.curr - phi.prop)
(exp(prop)/exp(curr))/(exp(phi.curr)/exp(phi.prop))
(prop - phi.prop) - (curr - phi.curr)
(prop - phi.curr) - (curr - phi.prop)
exp((prop - phi.curr) - (curr - phi.prop))
rmultinom(1, 3, c(0.1,0.3, 0.6))
rmultinom(1, 1, c(0.1,0.3, 0.6))
rmultinom(1, 1, c(0.1,0.3, 0.6))
rmultinom(1, 1, c(0.1,0.3, 0.6))
rmultinom(1, 1, c(0.1,0.3, 0.6))
rmultinom(1, 1, c(0.1,0.3, 0.6))
rmultinom(1, 1, c(0.1,0.3, 0.6))
rmultinom(1, 1, c(0.1,0.3, 0.6))
rmultinom(1, 1, c(0.1,0.3, 0.6))
rmultinom(1, 1, c(0.1,0.3, 0.6))
rdirichlet <- function(n, alpha){
x <- matrix(rgamma(n * length(alpha), alpha, 1), nrow = n, byrow = TRUE)
x / rowSums(x)
} # End of rdirichlet().
rdirichlet(1, c(0,1,0,0,0))
rgamma(n = 1,shape = 0, rate = 1)
?gamma
rdirichlet(1, c(1,2,1,1,1))
rdirichlet(1, c(1,2,1,1,1))
rdirichlet(1, c(1,2,1,1,1))
rdirichlet(1, c(1,2,1,1,1))
library(BoSSA)
blast("aj865339")
install.packages("R4X", repos="http://R-Forge.R-project.org")
detach("package:BoSSA", unload=TRUE)
remove.packages("BoSSA", lib="~/R/x86_64-pc-linux-gnu-library/3.1")
source("http://bioconductor.org/biocLite.R")
biocLite("annotate")
blastSequences(x = "GGCCTTCATTTACCCAAAATG", hitListSize="2")
biocLite("annotate")
library(annotate)
blastSequences(x = "GGCCTTCATTTACCCAAAATG", hitListSize="2")
obj <- blastSequences(x = "GGCCTTCATTTACCCAAAATG", hitListSize="2", timeout = 400)
library(annotate)
obj <- blastSequences(x = "GGCCTTCATTTACCCAAAATG", hitListSize="2", timeout = 400)
biocLite("Biostrings")
obj <- blastSequences(x = "GGCCTTCATTTACCCAAAATG", hitListSize="2", timeout = 400)
obj
obj[[1]]
obj[[1]]@unmasked
obj[[1]]@rowmask
obj[[1]]@colmask
obj[[1]]
cat(obj[[1]])
print(obj[[1]])
print(obj[[2]])
?blastSequences
obj <- blastSequences(x = "GGCCTTCATTTACCCAAAATG", hitListSize="2", timeout = 400, as = "XML")
obj
obj <- blastSequences(x = "GGCCTTCATTTACCCAAAATG", hitListSize="2", timeout = 400, as = "data.frame")
View(obj)
setwd("~/CodonUsageBias/RibosomeModel/RibModelFramework/ribModel/R")
genome <- seqinr::read.fasta("~/CodonUsageBias/organisms/bos_taurus/data/bt_mgc_cds_nt.fasta")
blastset <- genome[1:10]
seq <- blastset[1]
seq <- blastset[[1]]
for(seq in blastset)
{
}
seq
genome[[1]]
blastset <- seqinr::getSequence.character(genome[[1]])
blastset
blastset <- seqinr::getSequence.SeqFastadna(genome[[1]])
collapse(seqinr::getSequence.SeqFastadna(genome[[1]]))
blastset <- paste(seqinr::getSequence.SeqFastadna(genome[[1]]), sep="")
blastset <-   paste(seqinr::getSequence.SeqFastadna(genome[[1]]), collapse = '')
for(i in 1:10)
{
blastset[i] <- paste(seqinr::getSequence.SeqFastadna(genome[[i]]), collapse = '')
}
blastset
for(seq in blastset)
{
}
obj <- blastSequences(x = seq, hitListSize=2, timeout = timeout, as = "data.frame")
timeout=50
obj <- blastSequences(x = seq, hitListSize=2, timeout = timeout, as = "data.frame")
resultSet <- blastSequences(x = seq, hitListSize=hitlist, timeout = timeout, as = "data.frame")
hitlist=10
resultSet <- blastSequences(x = seq, hitListSize=hitlist, timeout = timeout, as = "data.frame")
timeout <- 400
resultSet <- blastSequences(x = seq, hitListSize=hitlist, timeout = timeout, as = "data.frame")
View(resultSet)
resultSet$Hit_def
as.character(resultSet$Hit_def)
vector("list", size = length(blastset))
vector("list", length = length(blastset))
k <- 1
returnSet[[k]] <- as.character(resultSet$Hit_def)
returnSet <- vector("list", length = length(blastset))
returnSet[[k]] <- as.character(resultSet$Hit_def)
blastset <- vector("character", length=5)
for(i in 1:5)
{
blastset[i] <- paste(seqinr::getSequence.SeqFastadna(genome[[i]]), collapse = '')
}
returnSet <- vector("list", length = length(blastset))
k <- 1
for(seq in blastset)
{
resultSet <- blastSequences(x = seq, hitListSize=hitlist, timeout = timeout, as = "data.frame")
returnSet[[k]] <- as.character(resultSet$Hit_def)
k <- k + 1
}
?try
timeout=150
blastset <- vector("character", length=5)
for(i in 10:15)
{
blastset[i] <- paste(seqinr::getSequence.SeqFastadna(genome[[i]]), collapse = '')
}
returnSet <- vector("list", length = length(blastset))
k <- 1
for(seq in blastset)
{
cat("blasting sequence ", k, " of ", length(blastset), "\n")
try(resultSet <- blastSequences(x = seq, hitListSize=hitlist, timeout = timeout, as = "data.frame"))
returnSet[[k]] <- as.character(resultSet$Hit_def)
k <- k + 1
}
blastset <- vector("character", length=5)
i <- 1
for(j in 10:15)
{
blastset[i] <- paste(seqinr::getSequence.SeqFastadna(genome[[j]]), collapse = '')
i <- i + 1
}
returnSet <- vector("list", length = length(blastset))
k <- 1
for(seq in blastset)
{
cat("blasting sequence ", k, " of ", length(blastset), "\n")
try(resultSet <- blastSequences(x = seq, hitListSize=hitlist, timeout = timeout, as = "data.frame"))
returnSet[[k]] <- as.character(resultSet$Hit_def)
k <- k + 1
}
returnSet
blastSequences
.blastSequencesToDataFrame
estm.phi <- read.csv("~/CodonUsageBias/organisms/bos_taurus/results/Btaurus_thin50_use500/without_xobs_singlechain.phi", sep=""), as.is=T)
estm.phi <- read.csv("~/CodonUsageBias/organisms/bos_taurus/results/Btaurus_thin50_use500/without_xobs_singlechain.phi", as.is=T)
View(estm.phi)
phi.name <- estm.phi[,1]
estm.phi <- estm.phi[, 2]
names(estm.phi) <- phi.name
estm.phi <- sort(estm.phi)
head(estm.phi)
estm.phi <- sort(estm.phi, decreasing = T)
head(estm.phi)
round(length(estm.phi*0.1))
round(length(estm.phi)*0.1)
round(length(estm.phi)*0.01)
genome[phi.name[1]]
genome[[phi.name[1]]]
genome <- seqinr::read.fasta("~/CodonUsageBias/organisms/bos_taurus/data/bt_mgc_cds_nt.fasta")
genome[[phi.name[1]]]
phi.name <- names(estm.phi)
seqinr::getSequence.SeqFastadna(genome[[ phi.name[j] ]])
j <- 1
seqinr::getSequence.SeqFastadna(genome[[ phi.name[j] ]])
?blastSequences
getGeneAnnotationUsingBLAST <- function(blastset, hitlist=10, timeout=50)
{
returnSet <- vector("list", length = length(blastset))
k <- 1
for(seq in blastset)
{
cat("blasting sequence ", k, " of ", length(blastset), "\n")
resultSet <- NA
try(resultSet <- blastSequences(x = seq, hitListSize=hitlist, timeout = timeout, as = "data.frame"))
returnSet[[k]] <- as.character(resultSet$Hit_def)
k <- k + 1
}
return(returnSet)
}
geneDescriptions <- getGeneAnnotationUsingBLAST(blastset, timeout=100)
blastset <- vector("character", length=5)
for(j in 1:numGenes)
{
seq <- seqinr::getSequence.SeqFastadna(genome[[ phi.name[j] ]])
blastset[j] <- paste(seq, collapse = '')
}
genome <- seqinr::read.fasta("~/CodonUsageBias/organisms/bos_taurus/data/bt_mgc_cds_nt.fasta")
estm.phi <- read.csv("~/CodonUsageBias/organisms/bos_taurus/results/Btaurus_thin50_use500/without_xobs_singlechain.phi", as.is=T)
phi.name <- estm.phi[, 1]
estm.phi <- estm.phi[, 2]
names(estm.phi) <- phi.name
estm.phi <- sort(estm.phi, decreasing = T)
phi.name <- names(estm.phi)
numGenes <- round(length(estm.phi)*0.01)
blastset <- vector("character", length=5)
for(j in 1:numGenes)
{
seq <- seqinr::getSequence.SeqFastadna(genome[[ phi.name[j] ]])
blastset[j] <- paste(seq, collapse = '')
}
phi.name[j]
estm.phi[86]
names(estm.phi[86])
geneDescriptions <- getGeneAnnotationUsingBLAST(blastset, timeout=100)
getGeneAnnotationUsingBLAST <- function(blastset, hitlist=10, timeout=50)
{
returnSet <- vector("list", length = length(blastset))
k <- 1
for(seq in blastset)
{
cat("blasting sequence ", k, " of ", length(blastset), "\n")
resultSet <- NA
try(
resultSet <- blastSequences(x = seq, hitListSize=hitlist, timeout = timeout, as = "data.frame");
returnSet[[k]] <- as.character(resultSet$Hit_def)
)
k <- k + 1
}
return(returnSet)
}
getGeneAnnotationUsingBLAST <- function(blastset, hitlist=10, timeout=50)
{
returnSet <- vector("list", length = length(blastset))
k <- 1
for(seq in blastset)
{
cat("blasting sequence ", k, " of ", length(blastset), "\n")
resultSet <- NA
try(
resultSet <- blastSequences(x = seq, hitListSize=hitlist, timeout = timeout, as = "data.frame"),
returnSet[[k]] <- as.character(resultSet$Hit_def)
)
k <- k + 1
}
return(returnSet)
}
geneDescriptions <- getGeneAnnotationUsingBLAST(blastset, timeout=100)
blastSequences
annotate:::.tryParseResult
interactive()
interactive(FALSE)
?interactive
interactive
interactive() <- FALSE
.CF.CT$parallel
setwd("~/CodonUsageBias/RibosomeModel/RibModelFramework/ribModel/src/ribModel/results")
test.phi <- read.table("test.phi", sep=",")[,2]
test.phi.names <- as.character(read.table("test.phi", sep=",")[,1])
kluyveri.phi <- read.table("Skluyveri_ChrA_phi_est.csv", sep=",", header=T)[, 2]
plot(log(test.phi), log(kluyveri.phi))
test.phi <- read.table("test.phi", sep=",")[,2]
test.phi.names <- as.character(read.table("test.phi", sep=",")[,1])
kluyveri.phi <- read.table("Skluyveri_ChrA_phi_est.csv", sep=",", header=T)[, 2]
plot(log(test.phi), log(kluyveri.phi))
test.phi.names[log(test.phi) < -2]
which(log(test.phi) < -2)
log(kluyveri.phi)[447]
log(kluyveri.phi)[416]
test.phiTrace <- read.table("../results/test.phiTrace", sep=",")
plot(test.phiTrace[, 416], type = "l")
plot(test.phiTrace[, 447], type = "l")
plot(test.phiTrace[, 4163], type = "l")
plot(test.phiTrace[, 163], type = "l")
plot(test.phiTrace[, 347], type = "l")
test.lik <- as.numeric(scan("../results//test.lik"))
test.lik <- as.numeric(scan("../results/test.lik"))
test.sphi <- as.numeric(scan("../results/test.sphi"))
plot(test.sphi, type="l")
?blastSequences
?try
#source("http://bioconductor.org/biocLite.R")
library(Biostrings)
library(annotate)
getGeneAnnotationUsingBLAST <- function(blastset, hitlist=10, timeout=50)
{
returnSet <- vector("list", length = length(blastset))
k <- 1
for(seq in blastset)
{
cat("blasting sequence ", k, " of ", length(blastset), "\n")
resultSet <- NA
try(resultSet <- blastSequences(x = seq, hitListSize=hitlist, timeout = timeout, as = "data.frame"))
try(returnSet[[k]] <- as.character(resultSet$Hit_def))
k <- k + 1
}
return(returnSet)
}
genome <- seqinr::read.fasta("~/CodonUsageBias/organisms/bos_taurus/data/bt_mgc_cds_nt.fasta")
estm.phi <- read.csv("~/CodonUsageBias/organisms/bos_taurus/results/Btaurus_thin50_use500/without_xobs_singlechain.phi", as.is=T)
phi.name <- estm.phi[, 1]
estm.phi <- estm.phi[, 2]
names(estm.phi) <- phi.name
estm.phi <- sort(estm.phi, decreasing = T)
phi.name <- names(estm.phi)
numGenes <- round(length(estm.phi)*0.001)
blastset <- vector("character", length=numGenes)
blastnames <- vector("character", length=numGenes)
for(j in 1:numGenes)
{
seq <- seqinr::getSequence.SeqFastadna(genome[[ phi.name[j] ]])
blastnames[j] <- phi.name[j]
blastset[j] <- paste(seq, collapse = '')
}
geneDescriptions <- getGeneAnnotationUsingBLAST(blastset, timeout=100)
sink("outfile.txt")
for(i in 1:length(blastset))
{
cat(blastnames[i], "\n")
cur <- geneDescriptions[[i]]
for(k in length(cur))
{
cat(cur[k], "\n")
}
cat("\n")
}
sink()
setwd("~/CodonUsageBias/RibosomeModel/RibModelFramework/ribModel/R")
sink("outfile.txt")
for(i in 1:length(blastset))
{
cat(blastnames[i], "\n")
cur <- geneDescriptions[[i]]
for(k in length(cur))
{
cat(cur[k], "\n")
}
cat("\n")
}
sink()
sink("outfile.txt")
for(i in 1:length(blastset))
{
cat(blastnames[i], "\n")
cur <- geneDescriptions[[i]]
for(k in 1:length(cur))
{
cat(cur[k], "\n")
}
cat("\n")
}
sink()
cut.to <- 300
for(i in 1:9) {cat(length(blastset[i]), "\n")}
for(i in 1:9) {cat(nchar(blastset[i]), "\n")}
seq <- blastset[1]
length(seq) > cut.to
nchar(seq) > cut.to
substr(seq, start = 1, stop = cut.to)
seq <- substr(seq, start = 1, stop = cut.to)
nchar(seq)
