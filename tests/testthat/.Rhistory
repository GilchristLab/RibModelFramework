return(p)
}
}
Ne <- seq(10,10000)
s<- 0
pf <- c()
for (i in Ne)
{
pf <- c(pf,probFixation(s,i))
}
plot(Ne,pf,type="l",ylim=c(0,0.2),main="Probability of Fixation")
s <- seq(0.01,0.09,0.01)
color = c("red","blue","yellow","green","purple","orange","brown","pink","magenta")
t<-1
for (j in s)
{
pf<-c()
for (i in Ne)
{
pf <- c(pf,probFixation(j,i))
}
lines(Ne,pf,lty=2,col=color[t])
t<-t+1
}
legend(x = "topleft",legend=as.character(c(0,s)),col = c("black",color),lty = c(1,rep(2,9)),title = "Selection coefficient (s)")
1/10
1/10000
Ne <- seq(10,10000)
s<- 0
pf <- c()
for (i in Ne)
{
pf <- c(pf,probFixation(s,i))
}
plot(Ne,pf,type="l",ylim=c(0,0.2),main="Probability of Fixation")
s <- seq(0.0001,0.0009,0.0001)
color = c("red","blue","yellow","green","purple","orange","brown","pink","magenta")
t<-1
for (j in s)
{
pf<-c()
for (i in Ne)
{
pf <- c(pf,probFixation(j,i))
}
lines(Ne,pf,lty=2,col=color[t])
t<-t+1
}
legend(x = "topleft",legend=as.character(c(0,s)),col = c("black",color),lty = c(1,rep(2,9)),title = "Selection coefficient (s)")
10 * 0.0001
10000*0.0001
Ne <- seq(10,10000000)
s<- 0
pf <- c()
for (i in Ne)
{
pf <- c(pf,probFixation(s,i))
}
1000000 * 0.0001
Ne <- seq(10000,1000000)
s<- 0
pf <- c()
for (i in Ne)
{
pf <- c(pf,probFixation(s,i))
}
Ne <- seq(10000,1000000,10000)
s<- 0
pf <- c()
for (i in Ne)
{
pf <- c(pf,probFixation(s,i))
}
plot(Ne,pf,type="l",ylim=c(0,0.2),main="Probability of Fixation")
s <- seq(0.0001,0.0009,0.0001)
color = c("red","blue","yellow","green","purple","orange","brown","pink","magenta")
t<-1
for (j in s)
{
pf<-c()
for (i in Ne)
{
pf <- c(pf,probFixation(j,i))
}
lines(Ne,pf,lty=2,col=color[t])
t<-t+1
}
legend(x = "topleft",legend=as.character(c(0,s)),col = c("black",color),lty = c(1,rep(2,9)),title = "Selection coefficient (s)")
## This is under the assumption that s < 0.1
probFixation<- function(s,Ne)
{
if (s == 0)
{
return(1/(2*Ne))
} else{
p <- (1-exp(-2*s))/(1-exp(-4*Ne*s))
return(p)
}
}
Ne <- seq(10000,1000000,10000)
s<- 0
pf <- c()
for (i in Ne)
{
pf <- c(pf,probFixation(s,i))
}
plot(Ne,pf,type="l",ylim=c(0,0.2),main="Probability of Fixation")
s <- seq(0.0001,0.0009,0.0001)
color = c("red","blue","yellow","green","purple","orange","brown","pink","magenta")
t<-1
for (j in s)
{
pf<-c()
for (i in Ne)
{
pf <- c(pf,probFixation(j,i))
}
lines(Ne,pf,lty=2,col=color[t])
t<-t+1
}
legend(x = "topleft",legend=as.character(c(0,s)),col = c("black",color),lty = c(1,rep(2,9)),title = "Selection coefficient (s)")
pf
## This is under the assumption that s < 0.1
probFixation<- function(s,Ne)
{
if (s == 0)
{
return(1/(2*Ne))
} else{
p <- (1-exp(-2*s))/(1-exp(-4*Ne*s))
return(p)
}
}
Ne <- seq(1,10000)
s<- 0
pf <- c()
for (i in Ne)
{
pf <- c(pf,probFixation(s,i))
}
plot(Ne,pf,type="l",ylim=c(0,0.2),main="Probability of Fixation")
s <- seq(0.0001,0.0009,0.0001)
color = c("red","blue","yellow","green","purple","orange","brown","pink","magenta")
t<-1
for (j in s)
{
pf<-c()
for (i in Ne)
{
pf <- c(pf,probFixation(j,i))
}
lines(Ne,pf,lty=2,col=color[t])
t<-t+1
}
legend(x = "topleft",legend=as.character(c(0,s)),col = c("black",color),lty = c(1,rep(2,9)),title = "Selection coefficient (s)")
1/10000
Ne <- seq(1,10000)
s<- 0
pf <- c()
for (i in Ne)
{
pf <- c(pf,probFixation(s,i))
}
plot(Ne,pf,type="l",ylim=c(0,0.2),main="Probability of Fixation")
s <- seq(0.0001,0.0009,0.0001)
color = c("red","blue","yellow","green","purple","orange","brown","pink","magenta")
t<-1
for (j in s)
{
pf<-c()
for (i in Ne)
{
pf <- c(pf,probFixation(j,i))
}
lines(Ne,pf,lty=2,col=color[t])
t<-t+1
}
legend(x = "topleft",legend=as.character(c(0,s)),col = c("black",color),lty = c(1,rep(2,9)),title = "Selection coefficient (s)")
Ne <- seq(1,10000)
s<- 0
pf <- c()
for (i in Ne)
{
pf <- c(pf,probFixation(s,i))
}
plot(Ne,pf,type="l",main="Probability of Fixation",ylab="Fixation of Probability")
s <- seq(0.0001,0.0009,0.0001)
color = c("red","blue","yellow","green","purple","orange","brown","pink","magenta")
t<-1
for (j in s)
{
pf<-c()
for (i in Ne)
{
pf <- c(pf,probFixation(j,i))
}
lines(Ne,pf,lty=2,col=color[t])
t<-t+1
}
legend(x = "topleft",legend=as.character(c(0,s)),col = c("black",color),lty = c(1,rep(2,9)),title = "Selection coefficient (s)")
probFixation<- function(s,Ne)
{
if (s == 0)
{
return(1/(2*Ne))
} else{
p <- (2*s*Ne/10000)/(1-exp(-4*Ne*s))
return(p)
}
}
Ne <- seq(1,10000)
s<- 0
pf <- c()
for (i in Ne)
{
pf <- c(pf,probFixation(s,i))
}
plot(Ne,pf,type="l",main="Probability of Fixation",ylab="Fixation of Probability")
s <- seq(0.0001,0.0009,0.0001)
color = c("red","blue","yellow","green","purple","orange","brown","pink","magenta")
t<-1
for (j in s)
{
pf<-c()
for (i in Ne)
{
pf <- c(pf,probFixation(j,i))
}
lines(Ne,pf,lty=2,col=color[t])
t<-t+1
}
legend(x = "topleft",legend=as.character(c(0,s)),col = c("black",color),lty = c(1,rep(2,9)),title = "Selection coefficient (s)")
probFixation<- function(s,Ne)
{
if (s == 0)
{
return(1/(2*Ne))
} else{
p <- (2*s*Ne/10000)/(1-exp(-4*Ne*s))
return(p)
}
}
Ne <- seq(1,10000)
s<- 0
pf <- c()
for (i in Ne)
{
pf <- c(pf,probFixation(s,i))
}
plot(Ne,pf,type="l",main="Probability of Fixation",ylab="Fixation of Probability")
s <- seq(0.0001,0.0009,0.0001)
color = c("red","blue","yellow","green","purple","orange","brown","pink","magenta")
t<-1
for (j in s)
{
pf<-c()
for (i in Ne)
{
pf <- c(pf,probFixation(j,i))
}
lines(Ne,pf,lty=2,col=color[t])
t<-t+1
}
legend(x = "topleft",legend=as.character(c(0,s)),col = c("black",color),lty = c(1,rep(2,9)),title = "Selection coefficient (s)")
Ne <- seq(1,10000)
s<- 0
pf <- c()
for (i in Ne)
{
pf <- c(pf,probFixation(s,i))
}
plot(Ne,pf,type="l",main="Probability of Fixation",ylab="Fixation of Probability")
s <- seq(0.001,0.009,0.0001)
color = c("red","blue","yellow","green","purple","orange","brown","pink","magenta")
t<-1
for (j in s)
{
pf<-c()
for (i in Ne)
{
pf <- c(pf,probFixation(j,i))
}
lines(Ne,pf,lty=2,col=color[t])
t<-t+1
}
legend(x = "topleft",legend=as.character(c(0,s)),col = c("black",color),lty = c(1,rep(2,9)),title = "Selection coefficient (s)")
Ne <- seq(1,100000)
s<- 0
pf <- c()
for (i in Ne)
{
pf <- c(pf,probFixation(s,i))
}
plot(Ne,pf,type="l",main="Probability of Fixation",ylab="Fixation of Probability")
s <- seq(0.001,0.009,0.0001)
color = c("red","blue","yellow","green","purple","orange","brown","pink","magenta")
t<-1
for (j in s)
{
pf<-c()
for (i in Ne)
{
pf <- c(pf,probFixation(j,i))
}
lines(Ne,pf,lty=2,col=color[t])
t<-t+1
}
probFixation<- function(s,Ne)
{
if (s == 0)
{
return(1/(2*Ne))
} else{
p <- (2*s*Ne/1000)/(1-exp(-4*Ne*s))
return(p)
}
}
Ne <- seq(1,1000)
s<- 0
pf <- c()
for (i in Ne)
{
pf <- c(pf,probFixation(s,i))
}
plot(Ne,pf,type="l",main="Probability of Fixation",ylab="Fixation of Probability")
s <- seq(0.001,0.009,0.0001)
color = c("red","blue","yellow","green","purple","orange","brown","pink","magenta")
t<-1
for (j in s)
{
pf<-c()
for (i in Ne)
{
pf <- c(pf,probFixation(j,i))
}
lines(Ne,pf,lty=2,col=color[t])
t<-t+1
}
legend(x = "topleft",legend=as.character(c(0,s)),col = c("black",color),lty = c(1,rep(2,9)),title = "Selection coefficient (s)")
## This is under the assumption that s < 0.1
probFixation<- function(s,Ne)
{
if (s == 0)
{
return(1/(2*Ne))
} else{
p <- (2*s*Ne/1000)/(1-exp(-4*Ne*s))
return(p)
}
}
Ne <- seq(1,1000)
s<- 0
pf <- c()
for (i in Ne)
{
pf <- c(pf,probFixation(s,i))
}
plot(Ne,pf,type="l",main="Probability of Fixation",ylab="Fixation of Probability")
s <- seq(0.001,0.009,0.001)
color = c("red","blue","yellow","green","purple","orange","brown","pink","magenta")
t<-1
for (j in s)
{
pf<-c()
for (i in Ne)
{
pf <- c(pf,probFixation(j,i))
}
lines(Ne,pf,lty=2,col=color[t])
t<-t+1
}
legend(x = "topleft",legend=as.character(c(0,s)),col = c("black",color),lty = c(1,rep(2,9)),title = "Selection coefficient (s)")
## This is under the assumption that s < 0.1
probFixation<- function(s,Ne)
{
if (s == 0)
{
return(1/(2*Ne))
} else{
p <- (2*s*Ne/1000)/(1-exp(-4*Ne*s))
return(p)
}
}
Ne <- seq(1,1000)
s<- 0
pf <- c()
for (i in Ne)
{
pf <- c(pf,probFixation(s,i))
}
plot(Ne,pf,type="l",main="Probability of Fixation",ylab="Fixation of Probability")
s <- seq(0.01,0.09,0.01)
color = c("red","blue","yellow","green","purple","orange","brown","pink","magenta")
t<-1
for (j in s)
{
pf<-c()
for (i in Ne)
{
pf <- c(pf,probFixation(j,i))
}
lines(Ne,pf,lty=2,col=color[t])
t<-t+1
}
legend(x = "topleft",legend=as.character(c(0,s)),col = c("black",color),lty = c(1,rep(2,9)),title = "Selection coefficient (s)")
Ne <- seq(1,1000)
s<- 0
pf <- c()
for (i in Ne)
{
pf <- c(pf,probFixation(s,i))
}
plot(Ne,pf,type="l",main="Probability of Fixation",ylab="Fixation of Probability")
s <- seq(0.01,0.09,0.01)
color = c("red","blue","yellow","green","purple","orange","brown","pink","magenta")
t<-1
for (j in s)
{
pf<-c()
for (i in Ne)
{
pf <- c(pf,probFixation(j,i))
}
lines(Ne,pf,lty=2,col=color[t])
t<-t+1
}
legend(x = "topright",legend=as.character(c(0,s)),col = c("black",color),lty = c(1,rep(2,9)),title = "Selection coefficient (s)")
library(AnaCoDa )
parameter <- loadParameterObject("Signal_Peptide_Project/Results/Scerevisiae/Full_genome/chain/run_2/R_objects/parameter.Rda")
getCSPEstimates(parameter,"Scerevisiae",samples=15000,mixture = 1,relative.to.optimal.codon = T,report.original.ref = T)
setwd("~/")
x <- c(1,2,3,4)
egg.larva.1 <- c(1,2,3,4)
egg.larva.2 <- c(2,3,4,5)
cor(egg.larva.1,egg.larva.2)
plot(egg.larva.1,egg.larva.2)
install.packages("gProfileR")
install.packages("BiocManager")
install.packages("GOfuncR")
library(phylolm)
help("phyloglm")
help("phylolm")
install.packages("VGAM")
library(AnaCoDa)
sessionInfo()
rm(list=ls(all.names=TRUE))
context("MCMC with ROC")
fileName = file.path("UnitTestingData", "testMCMCROCFiles", "simulatedAllUniqueR.fasta")
expressionFile = file.path("UnitTestingData", "testMCMCROCFiles", "simulatedAllUniqueR_phi_withPhiSet.csv")
test_that("file exists: simulatedAllUniqueR.fasta", {
expect_equal(file.exists(fileName), T)
})
library(testthat)
test_that("file exists: simulatedAllUniqueR.fasta", {
expect_equal(file.exists(fileName), T)
})
setwd("~/RibModelFramework/tests/testthat")
test_that("file exists: simulatedAllUniqueR.fasta", {
expect_equal(file.exists(fileName), T)
})
test_that("file exists: simulatedAllUniqueR_phi_withPhiSet.csv", {
expect_equal(file.exists(expressionFile), T)
})
sphi_init <- c(1,1)
numMixtures <- 2
mixDef <- "allUnique"
samples <- 100
thinning <- 10
adaptiveWidth <- 10
divergence.iteration <- 0
mcmc <- initializeMCMCObject(samples = samples, thinning = thinning, adaptive.width = adaptiveWidth,
est.expression=TRUE, est.csp=TRUE, est.hyper=TRUE)
set.seed(446141)
genome <- initializeGenomeObject(file = fileName, observed.expression.file = expressionFile, match.expression.by.id=FALSE)
geneAssignment <- sample(c(1,2), size = length(genome), replace = TRUE, prob = c(0.3, 0.7)) #c(rep(1,500), rep(2,500))
parameter <- initializeParameterObject(genome, sphi_init, numMixtures, geneAssignment, split.serine = TRUE, mixture.definition = mixDef)
warnings()
sessionInfo()
sphi_init <- c(1,1)
numMixtures <- 2
mixDef <- "allUnique"
samples <- 10
thinning <- 10
adaptiveWidth <- 10
divergence.iteration <- 0
mcmc <- initializeMCMCObject(samples = samples, thinning = thinning, adaptive.width = adaptiveWidth,
est.expression=TRUE, est.csp=TRUE, est.hyper=TRUE)
set.seed(446141)
genome <- initializeGenomeObject(file = fileName, observed.expression.file = expressionFile, match.expression.by.id=FALSE)
geneAssignment <- sample(c(1,2), size = length(genome), replace = TRUE, prob = c(0.3, 0.7)) #c(rep(1,500), rep(2,500))
parameter <- initializeParameterObject(genome, sphi_init, numMixtures, geneAssignment, split.serine = TRUE, mixture.definition = mixDef)
model <- initializeModelObject(parameter, "ROC", with.phi = TRUE)
outFile = file.path("UnitTestingOut", "testMCMCROCLogPhi.txt")
sink(outFile)
runMCMC(mcmc, genome, model, 1, divergence.iteration)
sink()
test_that("identical MCMC-ROC input with Phi, same log posterior", {
knownLogPosterior <- -828047
testLogPosterior <- round(mcmc$getLogPosteriorTrace()[10])
expect_equal(knownLogPosterior, testLogPosterior)
})
VGAM::familyname()
VGAM::familyname("multinomial")
help(multinomr)
help(multinomial)
mcmc <- initializeMCMCObject(samples = samples, thinning = thinning, adaptive.width = adaptiveWidth,
est.expression=TRUE, est.csp=TRUE, est.hyper=TRUE)
set.seed(446141)
genome <- initializeGenomeObject(file = fileName, observed.expression.file = expressionFile, match.expression.by.id=FALSE)
geneAssignment <- sample(c(1,2), size = length(genome), replace = TRUE, prob = c(0.3, 0.7)) #c(rep(1,500), rep(2,500))
parameter <- initializeParameterObject(genome, sphi_init, numMixtures, geneAssignment, split.serine = TRUE, mixture.definition = mixDef)
warnings()
